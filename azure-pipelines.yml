variables:
- name: AWS_ACCESS_KEY_ID
  value:  AKI
- name: AWS_SECRET_KEY_ID
  value: CP+
  
stages:
- stage: Build
  jobs:
  - job: BuildLambdaFunction
    pool:
      vmImage: 'ubuntu-latest'
    continueOnError: false
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '12.x'
        displayName: 'Install Node.js'
      - script: |
          npm install
          npm run lint
          npm test
        displayName: 'NPM install, lint, and test'
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(Build.SourcesDirectory)'
          includeRootFolder: true
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/LambdaBuild.zip'
          replaceExistingArchive: true
          verbose: true
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Pipeline.Workspace)'
          artifact: 'LambdaBuild'
          publishLocation: 'pipeline'
- stage: DevelopmentDeployment
  dependsOn: Build
  jobs:
  - deployment: LambdaDevelopment
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'Development'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              sudo apt-get install awscli
              aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
              aws configure set aws_secret_access_key $(AWS_SECRET_KEY_ID)
              aws configure set aws_default_region $(AWS_DEFAULT_REGION)
            displayName: 'install and configure AWS CLI'
          - script: |
              aws s3 cp $(Pipeline.Workspace)/LambdaBuild/s/$(AWS_CLOUDFORMATION_TEMPLATE_FILE_NAME) s3://$(AWS_S3_STAGING_BUCKET_NAME)
              aws s3 cp $(Pipeline.Workspace)/LambdaBuild/a/LambdaBuild.zip s3://$(AWS_S3_STAGING_BUCKET_NAME)
            displayName: 'upload CloudFormation template and Lambda function ZIP build to staging bucket'
          - script: |
              aws cloudformation deploy --stack-name $(AWS_STACK_NAME_DEVELOPMENT) --template-file $(Pipeline.Workspace)/LambdaBuild/s/$(AWS_CLOUDFORMATION_TEMPLATE_FILE_NAME) --tags Environment=Development --capabilities CAPABILITY_NAMED_IAM --no-fail-on-empty-changeset
            displayName: 'updating CloudFormation stack'
- stage: TestDeployment
  dependsOn: DevelopmentDeployment
  jobs:
  - deployment: LambdaTest
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'Test'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              sudo apt-get install awscli
              aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
              aws configure set aws_secret_access_key $(AWS_SECRET_KEY_ID)
              aws configure set aws_default_region $(AWS_DEFAULT_REGION)
            displayName: 'install and configure AWS CLI'
          - script: |
              aws s3 cp $(Pipeline.Workspace)/LambdaBuild/s/$(AWS_CLOUDFORMATION_TEMPLATE_FILE_NAME) s3://$(AWS_S3_STAGING_BUCKET_NAME)
              aws s3 cp $(Pipeline.Workspace)/LambdaBuild/a/LambdaBuild.zip s3://$(AWS_S3_STAGING_BUCKET_NAME)
            displayName: 'upload CloudFormation template and Lambda function ZIP build to staging bucket'
          - script: |
              aws cloudformation deploy --stack-name $(AWS_STACK_NAME_TEST) --template-file $(Pipeline.Workspace)/LambdaBuild/s/$(AWS_CLOUDFORMATION_TEMPLATE_FILE_NAME) --tags Environment=Test --capabilities CAPABILITY_NAMED_IAM --no-fail-on-empty-changeset
            displayName: 'updating CloudFormation stack'
- stage: ProductionDeployment
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  dependsOn: TestDeployment
  jobs:
  - deployment: LambdaProduction
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              sudo apt-get install awscli
              aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
              aws configure set aws_secret_access_key $(AWS_SECRET_KEY_ID)
              aws configure set aws_default_region $(AWS_DEFAULT_REGION)
            displayName: 'install and configure AWS CLI'
          - script: |
              aws s3 cp $(Pipeline.Workspace)/LambdaBuild/s/$(AWS_CLOUDFORMATION_TEMPLATE_FILE_NAME) s3://$(AWS_S3_STAGING_BUCKET_NAME)
              aws s3 cp $(Pipeline.Workspace)/LambdaBuild/a/LambdaBuild.zip s3://$(AWS_S3_STAGING_BUCKET_NAME)
            displayName: 'upload CloudFormation template and Lambda function ZIP build to staging bucket'
          - script: |
              aws cloudformation deploy --stack-name $(AWS_STACK_NAME_PRODUCTION) --template-file $(Pipeline.Workspace)/LambdaBuild/s/$(AWS_CLOUDFORMATION_TEMPLATE_FILE_NAME) --tags Environment=Production --capabilities CAPABILITY_NAMED_IAM --no-fail-on-empty-changeset
            displayName: 'updating CloudFormation stack'
